{"version":3,"sources":["deck.js","checkWin.js","card.js","board.js","PlayerWon.js","playArea.js","index.js"],"names":["playCard","card","hand","deck","index","findIndex","element","value","suit","firstHalf","slice","secondHalf","length","removedHand","concat","newCard","convertToPos","row","col","strRow","toString","strCol","checkPoint","board","current","pointPositions","count","complete","i","checkCol","colResult","completeCol","checkRow","rowResult","completeRow","checkDiagonalX","diagXResult","completeDiagX","checkDiagonalY","diagYResult","completeDiagY","indexToRowCol","cardIndex","iString","parseInt","charAt","Card","props","styleSelected","useState","circCol","setCol","taken","setTaken","pointPos","setPointPos","remCircle","e","target","style","visibility","setCircleClass","currPlayer","p","player1","newHand","newDeck","updateDeck","setPlayer1","setCurrent","player2","setPlayer2","useEffect","document","getElementById","z","pos","children","className","circleClass","selected","color","borderColor","cursor","boxShadow","onClick","stopPropagation","parentElement","previousSibling","cardInfo","indexOf","getCardInfo","simBoard","push","points","virtRow","virtCol","setSimBoard","setSelected","backgroundColor","clickCard","Board","id","PlayerWon","class","winner","PlayerHand","handClass","map","cardClass","key","PlayArea","gameStart","setStart","isHidden","setHidden","setHandClass","symbol","includes","alert","cardName","type","defaultValue","shuffledDeck","pos1","Math","floor","random","pos2","temp","Deck","suits","values","j","player1Hand","p1Col","p2Col","virtBoard","Array","Game","ReactDOM","render"],"mappings":"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","file":"static/js/main.7a0a9f05.chunk.js","sourcesContent":["export function getDeck() {\n  const deck = [];\n  const suits = ['hearts', 'diamonds', 'clubs', 'spades'];\n  //prettier-ignore\n  const values = [\"a\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\" , \"9\", \"10\", \"j\", \"q\", \"k\"];\n\n  //sequence uses 2 decks so do this twice\n  for (let z = 0; z < 2; z++) {\n    for (let i = 0; i < suits.length; i++) {\n      for (let j = 0; j < values.length; j++) {\n        //disregagrd 2j and 1 j for now just make reds vs blacks\n        /*if (\n          values[j] === 'j' &&\n          (suits[i] === 'hearts' || suits[i] === 'diamonds')\n        ) {\n          const card = { value: '2j', suit: suits[i] };\n          deck.push(card);\n        } else if (\n          values[j] === 'j' &&\n          (suits[i] === 'clubs' || suits[i] === 'spades')\n        ) {\n          const card = { value: '1j', suit: suits[i] };\n          deck.push(card);\n        } else {*/\n        const card = { value: values[j], suit: suits[i] };\n        deck.push(card);\n        //}\n      }\n    }\n  }\n  return deck;\n}\n\nexport function shuffle(deck) {\n  for (let i = 0; i < 1000; i++) {\n    const pos1 = Math.floor(Math.random() * deck.length);\n    const pos2 = Math.floor(Math.random() * deck.length);\n\n    const temp = deck[pos1];\n    deck[pos1] = deck[pos2];\n    deck[pos2] = temp;\n  }\n\n  return deck;\n}\n\nexport function deal(deck) {\n  const playerHand = [];\n  for (let i = 0; i < 7; i++) {\n    playerHand[i] = deck.pop();\n  }\n\n  return playerHand;\n}\n\nexport function playCard(card, hand, deck) {\n  const findCard = (element) =>\n    element.value === card.value && element.suit === card.suit;\n\n  const index = hand.findIndex(findCard);\n\n  //remove card from index using slice, splice mutates we dont want that no\n  //filter doesnt seem to work cant get it to just get rid of one card\n  const firstHalf = hand.slice(0, index);\n  const secondHalf = hand.slice(index + 1, hand.length);\n  const removedHand = firstHalf.concat(secondHalf);\n\n  //pop card from deck and add to hand\n  const [newCard] = deck.slice(0, 1);\n  const newHand = [...removedHand, newCard];\n  const newDeck = deck.slice(1, deck.length);\n  //return new hand and new deck\n\n  return [newHand, newDeck];\n}\n","//Need to update functions to include corner pieces\n\nfunction convertToPos(row, col) {\n  const strRow = row.toString();\n  const strCol = col.toString();\n\n  const index = strRow.concat(strCol);\n  return index;\n}\n\nfunction checkCol(board, row, col, current) {\n  let count = 1;\n  let complete = [];\n  let index = 0;\n\n  complete[index] = convertToPos(row, col);\n  index++;\n\n  for (let i = 1; i < 5; i++) {\n    if (row + i <= 9) {\n      if (board[row + i][col] === current || board[row + i][col] < 0) {\n        complete[index] = convertToPos(row + i, col);\n        index++;\n        count++;\n      } else if (\n        board[row + i][col] === current + 2 &&\n        board[row + i + 1][col] === current + 2\n      ) {\n        count++;\n        break;\n      } else if (board[row + i][col] === current + 2) {\n        count++;\n      } else {\n        break;\n      }\n    }\n  }\n\n  for (let i = 1; i < 5; i++) {\n    if (row - i >= 0) {\n      if (board[row - i][col] === current || board[row - i][col] < 0) {\n        complete[index] = convertToPos(row - i, col);\n        index++;\n        count++;\n      } else if (\n        board[row - i][col] === current + 2 &&\n        board[row - i - 1][col] === current + 2\n      ) {\n        count++;\n        break;\n      } else if (board[row - i][col] === current + 2) {\n        count++;\n      } else {\n        break;\n      }\n    }\n  }\n\n  if (count >= 5) {\n    return [1, complete];\n  } else {\n    return [0, null];\n  }\n}\n\nfunction checkRow(board, row, col, current) {\n  let count = 1;\n  let complete = [];\n  let index = 0;\n\n  complete[index] = convertToPos(row, col);\n  index++;\n\n  for (let i = 1; i < 5; i++) {\n    if (col + i <= 9) {\n      if (board[row][col + i] === current || board[row][col + i] < 0) {\n        complete[index] = convertToPos(row, col + i);\n        index++;\n        count++;\n      } else if (\n        board[row][col + i] === current + 2 &&\n        board[row][col + i + 1] === current + 2\n      ) {\n        count++;\n        break;\n      } else if (board[row][col + i] === current + 2) {\n        count++;\n      } else {\n        break;\n      }\n    }\n  }\n\n  for (let i = 1; i < 5; i++) {\n    if (col - i >= 0) {\n      if (board[row][col - i] === current || board[row][col - i] < 0) {\n        complete[index] = convertToPos(row, col - i);\n        index++;\n        count++;\n      } else if (\n        board[row][col - i] === current + 2 &&\n        board[row][col - i - 1] === current + 2\n      ) {\n        count++;\n        break;\n      } else if (board[row][col - i] === current + 2) {\n        count++;\n      } else {\n        break;\n      }\n    }\n  }\n\n  if (count >= 5) {\n    return [1, complete];\n  } else {\n    return [0, null];\n  }\n}\n\nfunction checkDiagonalX(board, row, col, current) {\n  let count = 1;\n  let complete = [];\n  let index = 0;\n\n  complete[index] = convertToPos(row, col);\n  index++;\n  //top right (-row, +col)\n  for (let i = 1; i < 5; i++) {\n    if (col + i <= 9 && row - i >= 0) {\n      if (board[row - i][col + i] === current || board[row - i][col + i] < 0) {\n        complete[index] = convertToPos(row - i, col + i);\n        index++;\n        count++;\n      } else if (\n        board[row - i][col + i] === current + 2 &&\n        board[row - i - 1][col + i + 1] === current + 2\n      ) {\n        count++;\n        break;\n      } else if (board[row - i][col + i] === current + 2) {\n        count++;\n      } else {\n        break;\n      }\n    }\n  }\n\n  //bottom left (+row, -col)\n  for (let i = 1; i < 5; i++) {\n    if (col - i >= 0 && row + i <= 9) {\n      if (board[row + i][col - i] === current || board[row + i][col - i] < 0) {\n        complete[index] = convertToPos(row + i, col - i);\n        index++;\n        count++;\n      } else if (\n        board[row + i][col - i] === current + 2 &&\n        board[row + i + 1][col - i - 1] === current + 2\n      ) {\n        count++;\n        break;\n      } else if (board[row + i][col - i] === current + 2) {\n        count++;\n      } else {\n        break;\n      }\n    }\n  }\n\n  if (count >= 5) {\n    return [1, complete];\n  } else {\n    return [0, null];\n  }\n}\n\nfunction checkDiagonalY(board, row, col, current) {\n  let count = 1;\n  let complete = [];\n  let index = 0;\n\n  complete[index] = convertToPos(row, col);\n  index++;\n\n  //top left (-row, -col)\n  for (let i = 1; i < 5; i++) {\n    if (col - i >= 0 && row - i >= 0) {\n      if (board[row - i][col - i] === current || board[row - i][col - i] < 0) {\n        complete[index] = convertToPos(row - i, col - i);\n        index++;\n        count++;\n      } else if (\n        board[row - i][col - i] === current + 2 &&\n        board[row - i - 1][col - i - 1] === current + 2\n      ) {\n        count++;\n        break;\n      } else if (board[row - i][col - i] === current + 2) {\n        count++;\n      } else {\n        break;\n      }\n    }\n  }\n\n  // bottom right (+row, +col)\n  for (let i = 1; i < 5; i++) {\n    if (col + i <= 9 && row + i <= 9) {\n      if (board[row + i][col + i] === current || board[row + i][col + i] < 0) {\n        complete[index] = convertToPos(row + i, col + i);\n        index++;\n        count++;\n      } else if (\n        board[row + i][col + i] === current + 2 &&\n        board[row + i + 1][col + i + 1] === current + 2\n      ) {\n        count++;\n        break;\n      } else if (board[row + i][col + i] === current + 2) {\n        count++;\n      } else {\n        break;\n      }\n    }\n  }\n\n  if (count >= 5) {\n    return [1, complete];\n  } else {\n    return [0, null];\n  }\n}\n\nexport default function checkPoint(board, row, col) {\n  const current = board[row][col];\n  let pointPositions = [];\n  //count is 1 as it includes placed checker\n  let count = 0;\n\n  //check col\n  const [colResult, completeCol] = checkCol(board, row, col, current);\n\n  count = count + colResult;\n\n  if (completeCol) {\n    pointPositions = completeCol;\n  }\n\n  //check row\n  const [rowResult, completeRow] = checkRow(board, row, col, current);\n\n  count = count + rowResult;\n\n  if (completeRow) {\n    pointPositions = pointPositions.concat(completeRow);\n  }\n\n  //check diagonals\n  const [diagXResult, completeDiagX] = checkDiagonalX(board, row, col, current);\n\n  count = count + diagXResult;\n\n  if (completeDiagX) {\n    pointPositions = pointPositions.concat(completeDiagX);\n  }\n\n  const [diagYResult, completeDiagY] = checkDiagonalY(board, row, col, current);\n\n  count = count + diagYResult;\n\n  if (completeDiagY) {\n    pointPositions = pointPositions.concat(completeDiagY);\n  }\n\n  return [count, pointPositions];\n}\n","import React, { useState, useEffect } from 'react';\nimport { playCard } from './deck';\nimport checkPoint from './checkWin.js';\n\nfunction getCardInfo(className) {\n  const cardInfo = className.slice(5, className.length);\n\n  const index = cardInfo.indexOf('-');\n  const suit = cardInfo.slice(0, index);\n  const num = cardInfo.slice(index + 1, cardInfo.length);\n  const card = { value: num, suit: suit };\n  return card;\n}\n\nfunction indexToRowCol(cardIndex) {\n  const iString = cardIndex.toString();\n  let row = 0;\n  let col = 0;\n\n  if (iString.length === 1) {\n    row = 0;\n    col = parseInt(iString.charAt(0));\n  } else {\n    row = parseInt(iString.charAt(0));\n    col = parseInt(iString.charAt(1));\n  }\n\n  return [row, col];\n}\n\nexport default function Card(props) {\n  const styleSelected = {};\n  const [circCol, setCol] = useState('');\n  const [taken, setTaken] = useState(false);\n  const [pointPos, setPointPos] = useState([]);\n\n  useEffect(() => {\n    //loop through point pos, for every item in point pos\n    //iterate through each position and change its classname using children[index]\n    const board = document.getElementById('board-wrapper');\n\n    for (let i = 0; i < pointPos.length; i++) {\n      for (let z = 0; z < pointPos[i].length; z++) {\n        const pos = pointPos[i][z];\n        board.children[pos].children[1].className = 'circle point';\n      }\n    }\n  }, [pointPos, props.circleClass]);\n\n  function remCircle(e) {\n    e.target.style.visibility = 'hidden';\n    //reset circle classname to circle\n    props.setCircleClass('circle');\n    //remove red jack from hand and update deck\n    let card = {};\n    for (let i = 0; i < props.currPlayer.hand.length; i++) {\n      if (\n        props.currPlayer.hand[i].value === 'j' &&\n        (props.currPlayer.hand[i].suit === 'hearts' ||\n          props.currPlayer.hand[i].suit === 'diamonds')\n      ) {\n        card = props.currPlayer.hand[i];\n        break;\n      }\n    }\n\n    if (props.currPlayer.p === 1) {\n      const [newHand, newDeck] = playCard(card, props.player1.hand, props.deck);\n      //update hand and deck\n      props.updateDeck(newDeck);\n      props.setPlayer1({ ...props.player1, hand: newHand });\n      props.setCurrent(props.player2);\n    } else {\n      const [newHand, newDeck] = playCard(card, props.player2.hand, props.deck);\n      props.updateDeck(newDeck);\n      props.setPlayer2({ ...props.player2, hand: newHand });\n      props.setCurrent(props.player1);\n    }\n    setTaken(false);\n  }\n\n  function placeChip(e) {\n    //place chip, play card and draw from deck. reset selected, change turn\n    e.stopPropagation();\n    if (taken) {\n      return;\n    }\n    e.target.parentElement.children[1].style.visibility = 'visible';\n    setCol(props.currPlayer.col);\n\n    let card = {};\n    let current = e.target.parentElement;\n    let cardIndex = 0;\n\n    while ((current = current.previousSibling) != null) {\n      cardIndex++;\n    }\n\n    const [row, col] = indexToRowCol(cardIndex);\n\n    if (props.selected === 'all') {\n      for (let i = 0; i < props.currPlayer.hand.length; i++) {\n        if (\n          props.currPlayer.hand[i].value === 'j' &&\n          (props.currPlayer.hand[i].suit === 'spades' ||\n            props.currPlayer.hand[i].suit === 'clubs')\n        ) {\n          card = props.currPlayer.hand[i];\n          break;\n        }\n      }\n    } else {\n      card = getCardInfo(e.target.parentElement.className);\n    }\n\n    const board = props.simBoard.slice();\n\n    if (props.currPlayer.p === 1) {\n      const [newHand, newDeck] = playCard(card, props.player1.hand, props.deck);\n      board[row][col] = 0;\n      //update hand and deck\n\n      props.updateDeck(newDeck);\n      props.setCurrent(props.player2);\n\n      //have to update checkpoint to return [points, completed], then store completed in a hook\n      //add a useeffect to hook so that whenever its updated every card from completed has a changed class name\n      //also need to update virtual board\n      const [count, pointPositions] = checkPoint(board, row, col);\n      const p = pointPos.slice();\n      p.push(pointPositions);\n      setPointPos(p);\n      const points = props.player1.points + count;\n      props.setPlayer1({ ...props.player1, hand: newHand, points: points });\n\n      for (let i = 0; i < pointPositions.length; i++) {\n        const [virtRow, virtCol] = indexToRowCol(pointPositions[i]);\n        board[virtRow][virtCol] = 2;\n      }\n\n      props.setSimBoard(board);\n    } else {\n      const [newHand, newDeck] = playCard(card, props.player2.hand, props.deck);\n      board[row][col] = 1;\n\n      props.updateDeck(newDeck);\n      props.setCurrent(props.player1);\n\n      //have to update checkpoint to return [points, completed], then store completed in a hook\n      //add a useeffect to hook so that whenever its updated every card from completed has a changed class name\n      const [count, pointPositions] = checkPoint(board, row, col);\n      const p = pointPos.slice();\n      p.push(pointPositions);\n      setPointPos(p);\n      const points = props.player2.points + count;\n      props.setPlayer2({ ...props.player2, hand: newHand, points: points });\n\n      for (let i = 0; i < pointPositions.length; i++) {\n        const [virtRow, virtCol] = indexToRowCol(pointPositions[i].toString());\n        board[virtRow][virtCol] = 3;\n      }\n\n      props.setSimBoard(board);\n    }\n    setTaken(true);\n    props.setSelected('');\n  }\n\n  if (\n    props.selected === props.className ||\n    (props.selected === 'all' && taken === false)\n  ) {\n    styleSelected.color = 'yellow';\n    styleSelected.borderColor = 'yellow';\n    styleSelected.cursor = 'pointer';\n    styleSelected.boxShadow = '0 0 11px yellow';\n\n    return (\n      <div\n        className={props.className}\n        style={styleSelected}\n        onClick={placeChip}\n      >\n        <div className=\"symbol\"></div>\n        <div\n          className={props.circleClass}\n          style={{\n            backgroundColor: circCol,\n          }}\n          onClick={remCircle}\n        ></div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={props.className}\n      style={styleSelected}\n      onClick={props.clickCard}\n    >\n      <div className=\"symbol\"></div>\n      <div\n        className={props.circleClass}\n        style={{ backgroundColor: circCol }}\n        onClick={remCircle}\n      ></div>\n    </div>\n  );\n}\n","import React from 'react';\nimport Card from './card.js';\n\n//Not happy with this file but cant think of another way to structure.\n//Every card is in a unique position with no pattern\n//So its impossible(? - at least for me) to find a non brute-force solution\n\nexport default function Board(props) {\n  return (\n    <div id=\"board-wrapper\">\n      <Card className=\"card corner\"></Card>\n      <Card className=\"card spades-2\" {...props}></Card>\n      <Card className=\"card spades-3\" {...props}></Card>\n      <Card className=\"card spades-4\" {...props}></Card>\n      <Card className=\"card spades-5\" {...props}></Card>\n      <Card className=\"card spades-6\" {...props}></Card>\n      <Card className=\"card spades-7\" {...props}></Card>\n      <Card className=\"card spades-8\" {...props}></Card>\n      <Card className=\"card spades-9\" {...props}></Card>\n      <Card className=\"card corner\"></Card>\n      <Card className=\"card clubs-6\" {...props}></Card>\n      <Card className=\"card clubs-5\" {...props}></Card>\n      <Card className=\"card clubs-4\" {...props}></Card>\n      <Card className=\"card clubs-3\" {...props}></Card>\n      <Card className=\"card clubs-2\" {...props}></Card>\n      <Card className=\"card hearts-a\" {...props}></Card>\n      <Card className=\"card hearts-k\" {...props}></Card>\n      <Card className=\"card hearts-q\" {...props}></Card>\n      <Card className=\"card hearts-10\" {...props}></Card>\n      <Card className=\"card spades-10\" {...props}></Card>\n      <Card className=\"card clubs-7\" {...props}></Card>\n      <Card className=\"card spades-a\" {...props}></Card>\n      <Card className=\"card diamonds-2\" {...props}></Card>\n      <Card className=\"card diamonds-3\" {...props}></Card>\n      <Card className=\"card diamonds-4\" {...props}></Card>\n      <Card className=\"card diamonds-5\" {...props}></Card>\n      <Card className=\"card diamonds-6\" {...props}></Card>\n      <Card className=\"card diamonds-7\" {...props}></Card>\n      <Card className=\"card hearts-9\" {...props}></Card>\n      <Card className=\"card spades-q\" {...props}></Card>\n      <Card className=\"card clubs-8\" {...props}></Card>\n      <Card className=\"card spades-k\" {...props}></Card>\n      <Card className=\"card clubs-6\" {...props}></Card>\n      <Card className=\"card clubs-5\" {...props}></Card>\n      <Card className=\"card clubs-4\" {...props}></Card>\n      <Card className=\"card clubs-3\" {...props}></Card>\n      <Card className=\"card clubs-2\" {...props}></Card>\n      <Card className=\"card diamonds-8\" {...props}></Card>\n      <Card className=\"card hearts-8\" {...props}></Card>\n      <Card className=\"card spades-k\" {...props}></Card>\n      <Card className=\"card clubs-9\" {...props}></Card>\n      <Card className=\"card spades-q\" {...props}></Card>\n      <Card className=\"card clubs-7\" {...props}></Card>\n      <Card className=\"card hearts-6\" {...props}></Card>\n      <Card className=\"card hearts-5\" {...props}></Card>\n      <Card className=\"card hearts-4\" {...props}></Card>\n      <Card className=\"card hearts-a\" {...props}></Card>\n      <Card className=\"card diamonds-9\" {...props}></Card>\n      <Card className=\"card hearts-7\" {...props}></Card>\n      <Card className=\"card spades-a\" {...props}></Card>\n      <Card className=\"card clubs-10\" {...props}></Card>\n      <Card className=\"card spades-10\" {...props}></Card>\n      <Card className=\"card clubs-8\" {...props}></Card>\n      <Card className=\"card hearts-7\" {...props}></Card>\n      <Card className=\"card hearts-2\" {...props}></Card>\n      <Card className=\"card hearts-3\" {...props}></Card>\n      <Card className=\"card hearts-k\" {...props}></Card>\n      <Card className=\"card diamonds-10\" {...props}></Card>\n      <Card className=\"card hearts-6\" {...props}></Card>\n      <Card className=\"card diamonds-2\" {...props}></Card>\n      <Card className=\"card clubs-q\" {...props}></Card>\n      <Card className=\"card spades-9\" {...props}></Card>\n      <Card className=\"card clubs-9\" {...props}></Card>\n      <Card className=\"card hearts-8\" {...props}></Card>\n      <Card className=\"card hearts-9\" {...props}></Card>\n      <Card className=\"card hearts-10\" {...props}></Card>\n      <Card className=\"card hearts-q\" {...props}></Card>\n      <Card className=\"card diamonds-q\" {...props}></Card>\n      <Card className=\"card hearts-5\" {...props}></Card>\n      <Card className=\"card diamonds-3\" {...props}></Card>\n      <Card className=\"card clubs-k\" {...props}></Card>\n      <Card className=\"card spades-8\" {...props}></Card>\n      <Card className=\"card clubs-10\" {...props}></Card>\n      <Card className=\"card clubs-q\" {...props}></Card>\n      <Card className=\"card clubs-k\" {...props}></Card>\n      <Card className=\"card clubs-a\" {...props}></Card>\n      <Card className=\"card diamonds-a\" {...props}></Card>\n      <Card className=\"card diamonds-k\" {...props}></Card>\n      <Card className=\"card hearts-4\" {...props}></Card>\n      <Card className=\"card diamonds-4\" {...props}></Card>\n      <Card className=\"card clubs-a\" {...props}></Card>\n      <Card className=\"card spades-7\" {...props}></Card>\n      <Card className=\"card spades-6\" {...props}></Card>\n      <Card className=\"card spades-5\" {...props}></Card>\n      <Card className=\"card spades-4\" {...props}></Card>\n      <Card className=\"card spades-3\" {...props}></Card>\n      <Card className=\"card spades-2\" {...props}></Card>\n      <Card className=\"card hearts-2\" {...props}></Card>\n      <Card className=\"card hearts-3\" {...props}></Card>\n      <Card className=\"card diamonds-5\" {...props}></Card>\n      <Card className=\"card corner\"></Card>\n      <Card className=\"card diamonds-a\" {...props}></Card>\n      <Card className=\"card diamonds-k\" {...props}></Card>\n      <Card className=\"card diamonds-q\" {...props}></Card>\n      <Card className=\"card diamonds-10\" {...props}></Card>\n      <Card className=\"card diamonds-9\" {...props}></Card>\n      <Card className=\"card diamonds-8\" {...props}></Card>\n      <Card className=\"card diamonds-7\" {...props}></Card>\n      <Card className=\"card diamonds-6\" {...props}></Card>\n      <Card className=\"card corner\"></Card>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function PlayerWon(props) {\n  return (\n    <div id=\"play-area\">\n      <div class=\"play-title won\">{`PLAYER ${props.winner.p} WINS`}</div>\n      <div id=\"p1-points\" style={{ color: props.player1.col }}>\n        P1: {props.player1.points}\n      </div>\n      <div id=\"p2-points\" style={{ color: props.player2.col }}>\n        P2: {props.player2.points}\n      </div>\n      <div id=\"deck-count\">{`Remaining in deck: ${props.deck.length}`}</div>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport * as Deck from './deck.js';\nimport Card from './card.js';\n\nfunction PlayerHand(props) {\n  //put all symbols into key-value tree? maybe add through css\n  //card spades-2\n  return (\n    <div className={props.handClass}>\n      {props.currPlayer.hand.map((card, index) => {\n        let cardClass = 'player-card ';\n        cardClass = cardClass.concat(card.suit);\n        cardClass = cardClass.concat('-');\n        cardClass = cardClass.concat(card.value);\n\n        return (\n          <Card\n            className={cardClass}\n            key={index}\n            clickCard={props.clickCard}\n            circleClass={props.circleClass}\n            setCircleClass={props.setCircleClass}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default function PlayArea(props) {\n  const [gameStart, setStart] = useState(false);\n  const [isHidden, setHidden] = useState(true);\n  const [handClass, setHandClass] = useState('player-hand');\n\n  function clickPlay(e) {\n    setStart(true);\n\n    const newDeck = Deck.getDeck();\n    const shuffledDeck = Deck.shuffle(newDeck);\n    //const player1Hand = Deck.deal(shuffledDeck);\n    //const player2Hand = Deck.deal(shuffledDeck);\n\n    const player1Hand = [\n      { value: '6', suit: 'clubs' },\n      { value: '5', suit: 'clubs' },\n      { value: '4', suit: 'clubs' },\n      { value: '3', suit: 'clubs' },\n      { value: '2', suit: 'clubs' },\n      { value: 'a', suit: 'hearts' },\n      { value: 'q', suit: 'hearts' },\n      { value: 'k', suit: 'hearts' },\n      { value: '6', suit: 'diamonds' },\n    ];\n    const player2Hand = [\n      { value: 'j', suit: 'spades' },\n      { value: 'j', suit: 'spades' },\n      { value: 'a', suit: 'diamonds' },\n      { value: 'k', suit: 'diamonds' },\n      { value: 'q', suit: 'diamonds' },\n      { value: '10', suit: 'diamonds' },\n      { value: '9', suit: 'diamonds' },\n    ];\n\n    //get input colors\n    const p1Col = e.target.parentElement.children[6].value;\n    const p2Col = e.target.parentElement.children[7].value;\n\n    props.setPlayer1({ ...props.player1, hand: player1Hand, col: p1Col });\n    props.setPlayer2({ ...props.player2, hand: player2Hand, col: p2Col });\n    props.updateDeck(shuffledDeck);\n    props.setCurrent({ hand: player1Hand, p: 1, col: p1Col });\n  }\n\n  function clickCard(e) {\n    const name = 'card ';\n    const symbol = e.target.parentElement.className.slice(\n      12,\n      e.target.parentElement.className.length\n    );\n\n    props.setCircleClass('circle');\n    //if card name is jack add event listener to chips? removal.\n    if (\n      symbol.charAt(symbol.length - 1) === 'j' &&\n      (symbol.includes('diamonds') || symbol.includes('hearts'))\n    ) {\n      alert('Select a chip to remove or choose another card');\n      props.setCircleClass('circle-rem');\n    }\n\n    if (\n      symbol.charAt(symbol.length - 1) === 'j' &&\n      (symbol.includes('spades') || symbol.includes('clubs'))\n    ) {\n      alert('Place a chip wherever you please');\n      props.setSelected('all');\n    } else {\n      const cardName = name.concat(symbol);\n      props.setSelected(cardName);\n    }\n  }\n\n  /*function changeCol(e) {\n    const color = e.target.value;\n\n    if (props.currPlayer.p === 1) {\n      props.setPlayer1({ ...props.player1, col: color });\n    } else {\n      props.setPlayer2({ ...props.player1, col: color });\n    }\n\n    props.setCurrent({ ...props.currPlayer, col: color });\n  }*/\n\n  function toggleHand() {\n    if (isHidden) {\n      setHandClass('player-hand show');\n      setHidden(false);\n    } else {\n      setHandClass('player-hand');\n      setHidden(true);\n    }\n  }\n\n  useEffect(() => {\n    setHandClass('player-hand');\n    setHidden(true);\n  }, [props.currPlayer]);\n\n  if (gameStart === true) {\n    return (\n      <div id=\"play-area\">\n        <div className=\"play-title\">{`PLAYER ${props.currPlayer.p}`}</div>\n        <div id=\"p1-points\" style={{ color: props.player1.col }}>\n          P1: {props.player1.points}\n        </div>\n        <div id=\"p2-points\" style={{ color: props.player2.col }}>\n          P2: {props.player2.points}\n        </div>\n        <div id=\"deck-count\">{`Remaining in deck: ${props.deck.length}`}</div>\n        <PlayerHand\n          handClass={handClass}\n          currPlayer={props.currPlayer}\n          clickCard={clickCard}\n          circleClass={props.circleClass}\n          setCircleClass={props.setCircleClass}\n        />\n        <button id=\"toggle-hand\" onClick={toggleHand}>\n          Show/Hide Hand\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div id=\"play-area\">\n      <div className=\"play-title\">SEQUENCE</div>\n      <div className=\"play-description\">\n        Use your cards to place checkers onto the board.\n      </div>\n      <div className=\"play-description two\">\n        Link 5 checkers in a row to get a point, first to 2 points win.\n      </div>\n\n      <div className=\"jack-rule\">\n        <b>Black Jacks</b> let you place a chip anywhere on the board.\n      </div>\n      <div className=\"jack-rule three\">\n        <span id=\"jack\">Red Jacks</span> let you remove any chip on the board.\n      </div>\n\n      <div className=\"extra-rules\">\n        Corners act as a neutral shared 'wild' piece for each side.<br></br>\n        Once a 5-in-a-row is achieved you cannot remove from the set <br></br>\n        You cannot use more than one chip from a complete set to create another\n        5-in-a-row <br></br>\n        Meaning 9 in a row will amount to 2 points. <br></br>\n        Choose colors that contrast well with the board. You cannot change once\n        the game starts\n      </div>\n\n      <input type=\"color\" id=\"p1-col\" defaultValue=\"#00ff1e\"></input>\n      <input type=\"color\" id=\"p2-col\" defaultValue=\"#FF00D7\"></input>\n      <button id=\"play-now\" onClick={clickPlay}>\n        Play Now\n      </button>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './cards.css';\nimport Board from './board.js';\nimport PlayerWon from './PlayerWon.js';\nimport PlayArea from './playArea.js';\n\nconst virtBoard = new Array(10);\n\nfor (let i = 0; i < 10; i++) {\n  virtBoard[i] = new Array(10);\n}\n\n//set up corners\n\nvirtBoard[0][0] = -1;\nvirtBoard[0][9] = -1;\nvirtBoard[9][0] = -1;\nvirtBoard[9][9] = -1;\n\n/*virtBoard[3][3] = 0;\nvirtBoard[2][2] = 0;\n\nvirtBoard[4][4] = 0;\n\nvirtBoard[2][4] = 0;\nvirtBoard[3][4] = 0;\n\nvirtBoard[3][5] = 0;\nvirtBoard[2][6] = 0;\n\nvirtBoard[5][5] = 0;\nvirtBoard[6][6] = 0;\n\nvirtBoard[5][4] = 0;\nvirtBoard[6][4] = 0;\n\nvirtBoard[5][3] = 0;\nvirtBoard[6][2] = 0;\n\nvirtBoard[4][2] = 0;\nvirtBoard[4][3] = 0;\n\nvirtBoard[4][5] = 0;\nvirtBoard[4][6] = 0;\n\nconsole.log(checkPoint(virtBoard, 4, 4));*/\n\nfunction Game() {\n  const [simBoard, setSimBoard] = useState(virtBoard);\n  const [selected, setSelected] = useState('');\n  const [deck, updateDeck] = useState([]);\n  const [player1, setPlayer1] = useState({\n    hand: [],\n    p: 1,\n    col: '',\n    points: 0,\n  });\n  const [player2, setPlayer2] = useState({\n    hand: [],\n    p: 2,\n    col: '',\n    points: 0,\n  });\n  const [currPlayer, setCurrent] = useState(player1);\n  const [circleClass, setCircleClass] = useState('circle');\n\n  if (player1.points >= 2) {\n    return (\n      <div id=\"game-wrap\">\n        <div id=\"board-area\">\n          <Board\n            selected={selected}\n            setSelected={setSelected}\n            setCurrent={setCurrent}\n            currPlayer={currPlayer}\n            setPlayer1={setPlayer1}\n            player1={player1}\n            setPlayer2={setPlayer2}\n            player2={player2}\n            deck={deck}\n            updateDeck={updateDeck}\n            circleClass={circleClass}\n            setCircleClass={setCircleClass}\n            simBoard={simBoard}\n            setSimBoard={setSimBoard}\n          />\n        </div>\n        <PlayerWon\n          winner={player1}\n          player1={player1}\n          player2={player2}\n          deck={deck}\n        />\n      </div>\n    );\n  } else if (player2.points >= 2) {\n    return (\n      <div id=\"game-wrap\">\n        <div id=\"board-area\">\n          <Board\n            selected={selected}\n            setSelected={setSelected}\n            setCurrent={setCurrent}\n            currPlayer={currPlayer}\n            setPlayer1={setPlayer1}\n            player1={player1}\n            setPlayer2={setPlayer2}\n            player2={player2}\n            deck={deck}\n            updateDeck={updateDeck}\n            circleClass={circleClass}\n            setCircleClass={setCircleClass}\n            simBoard={simBoard}\n            setSimBoard={setSimBoard}\n          />\n        </div>\n        <PlayerWon\n          winner={player2}\n          player1={player1}\n          player2={player2}\n          deck={deck}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div id=\"game-wrap\">\n      <div id=\"board-area\">\n        <Board\n          selected={selected}\n          setSelected={setSelected}\n          setCurrent={setCurrent}\n          currPlayer={currPlayer}\n          setPlayer1={setPlayer1}\n          player1={player1}\n          setPlayer2={setPlayer2}\n          player2={player2}\n          deck={deck}\n          updateDeck={updateDeck}\n          circleClass={circleClass}\n          setCircleClass={setCircleClass}\n          simBoard={simBoard}\n          setSimBoard={setSimBoard}\n        />\n      </div>\n      <PlayArea\n        setSelected={setSelected}\n        setCurrent={setCurrent}\n        currPlayer={currPlayer}\n        player1={player1}\n        setPlayer1={setPlayer1}\n        player2={player2}\n        setPlayer2={setPlayer2}\n        deck={deck}\n        updateDeck={updateDeck}\n        circleClass={circleClass}\n        setCircleClass={setCircleClass}\n      />\n    </div>\n  );\n}\n\n// ==========================================================\n\nReactDOM.render(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}